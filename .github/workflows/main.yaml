# .github/workflows/main.yml
name: CI/CD Pipeline with Intelligent Notifications

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # This is your primary job. It can be named anything.
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Build and Tests
        run: |
          echo "Running build and test steps..."
          # To test the failure notification, uncomment the next line
          # exit 1
          echo "All steps passed!"

  # This job runs ONLY when all preceding jobs (in this case, 'build-and-test') succeed.
  notify-on-success:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: success() # This is the key condition for this job
    steps:
      - name: Send Success Notification to Teams
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          PIPELINE_NAME="${{ github.workflow }}"
          PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_SHA="${{ github.sha }}"
          AUTHOR="${{ github.actor }}"

          # Create a simple JSON payload for the success card
          JSON_PAYLOAD=$(cat <<EOF
          {
            "type": "message",
            "attachments": [{
              "contentType": "application/vnd.microsoft.card.adaptive",
              "content": {
                "type": "AdaptiveCard",
                "version": "1.4",
                "body": [
                  {
                    "type": "TextBlock",
                    "text": "CI/CD Pipeline Succeeded: ${PIPELINE_NAME}",
                    "weight": "Bolder", "size": "Large", "color": "Good"
                  },
                  {
                    "type": "FactSet",
                    "facts": [
                      {"title": "Status:", "value": "âœ… Success"},
                      {"title": "Author:", "value": "${AUTHOR}"},
                      {"title": "Commit:", "value": "$(echo ${COMMIT_SHA} | cut -c1-7)"}
                    ]
                  }
                ],
                "actions": [{"type": "Action.OpenUrl", "title": "View Pipeline Run", "url": "${PIPELINE_URL}"}]
              }
            }]
          }
          EOF
          )
          
          curl -X POST -H "Content-Type: application/json" -d "$JSON_PAYLOAD" "$TEAMS_WEBHOOK_URL"

  # This job runs ONLY when any preceding job fails.
  notify-on-failure:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: failure() # This is the key condition for this job
    # Permissions are required for the GitHub CLI to read action logs
    permissions:
      actions: read
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: pip install langchain langchain-google-genai requests

      - name: Fetch logs from failed job
        env:
          # The GITHUB_TOKEN is automatically created and provided by GitHub
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting 15 seconds for API to finalize logs..."
          sleep 15
          echo "Fetching logs for run ${{ github.run_id }}..."
          gh run view ${{ github.run_id }} --log-failed > failure_logs.txt
          echo "Logs saved to failure_logs.txt"

      - name: Run Analysis and Send Notification
        env:
          # Set all environment variables for the Python script
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
          PIPELINE_STATUS: "failure"
          PIPELINE_NAME: "${{ github.workflow }}"
          PIPELINE_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_SHA: "${{ github.sha }}"
          AUTHOR: "${{ github.actor }}"
        run: |
          # Assumes your script is named 'notify.py' in the root of your repo
          python notify.py
