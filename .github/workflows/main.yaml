# .github/workflows/main.yml
# This is the main CI/CD pipeline. It contains multiple jobs with different
# potential failure points for testing the notification system.
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - '**' # Triggers on all branches

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Build Steps
        run: |
          echo "Running build steps..."
          # This job will always succeed to allow subsequent jobs to run.
          echo "Build successful!"

  lint:
    runs-on: ubuntu-latest
    needs: build # Depends on the 'build' job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Lint Python Code
        run: |
          echo "Setting up Python and Flake8 for linting..."
          pip install flake8
          
          echo "Creating a Python file with a linting error..."
          # This file has an unused import, which flake8 will catch as an error.
          cat << EOF > app.py
          import os # Unused import
          
          def main():
              name = "World"
              print(f"Hello, {name}")

          if __name__ == "__main__":
              main()
          EOF

          echo "Running flake8..."
          # To test this failure, uncomment the following line:
          # flake8 app.py
          
          echo "Linting complete (no errors enforced)."

  unit-test:
    runs-on: ubuntu-latest
    needs: lint # Depends on the 'lint' job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Unit Tests with Missing Dependency
        run: |
          echo "Running a Python script with a missing dependency..."
          # Create a dummy python script that requires a library we won't install
          cat << EOF > test_script.py
          import pandas as pd
          print("This script will fail because pandas is not installed.")
          EOF
          
          echo "Running the test script..."
          # To test this failure, uncomment the following line:
          # python test_script.py

          echo "Unit tests complete (no errors enforced)."

  integration-test:
    runs-on: ubuntu-latest
    needs: unit-test # Depends on the 'unit-test' job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run Terraform Validation with Syntax Error
        run: |
          echo "Setting up Terraform..."
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update
          sudo apt-get install terraform

          echo "Creating an invalid Terraform file..."
          # This .tf file has an invalid resource type name ('aws_isntance' instead of 'aws_instance')
          cat << EOF > main.tf
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 4.0"
              }
            }
          }

          resource "aws_isntance" "example" { # <-- Deliberate typo here
            ami           = "ami-0c55b159cbfafe1f0"
            instance_type = "t2.micro"
          }
          EOF

          echo "Running terraform init and validate..."
          terraform init -no-color
          
          # To test this failure, uncomment the following line:
          terraform validate -no-color

          echo "Integration tests complete (no errors enforced)."
